/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.5.1/userguide/java_library_plugin.html
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

mainClassName = 'com.leecampbell.cod.application.SparkApplication'

dependencies {
    //TODO: Split into projects? (so Model is isolated from adapter implementations)
    compile 'com.sparkjava:spark-core:2.3'
    compile 'com.google.code.gson:gson:2.8.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

jacocoTestReport {
    reports {
        xml.enabled true    //Required by tools (e.g. Coveralls and IDE integrations)
        html.enabled true   //Human readable
    }
}

check.dependsOn jacocoTestReport

coveralls {
  jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the coverage report to Coveralls.io'

  dependsOn jacocoTestReport
  onlyIf { System.env.'CI' }
}



tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               //TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}